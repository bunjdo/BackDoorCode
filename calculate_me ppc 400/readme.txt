Calculate_me
Задание по программированию за 400

Решальщикам дан адрес и порт, к которому они должны подключиться используя такие инструменты, как socket или netcat.
Подключившись, они читают вступительную речь  о том, как важно уметь современному IT-специалисту уметь обращаться 
с различными массивами данных. Также там указывается время, за которое им нужно будет ответить на каждое сообщение.

Решальщик принимает челлендж и начинает получать данные:
	Челлендж состоит из 10 уровней, по 10 шагов в каждом.
	Каждый уровень превносит что-то новое в получаемые данные:
		1 - просто числа, только сложение и вычитание
		2 - добавляются скобки
		3 - добавляется умножение
		4 - числа прописью (One, Two, etc), только сложение и вычитание
		5 - добавляются скобки и умножение
		6 - римские числа, только сложение и вычитание
		7 - добавляются скобки и умножение
		8 - прописные и обычные числа в случайном порядке + скобки и умножение
		9 - римские и обычные числа в случайном порядке + скобки и умножение
		10 - все числа в случайном порядке + скобки и умножение
	Каждый шаг увеличивает используемые числа, добавляет ещё одно число. Таким образом, на 1 шагу каждого уровня
	мы имеем 2 небольших числа, на последнем - 11 больших.
	Знаки генерируются случайным образом.
	Скобки генерируются случайным образом, но не вопреки законам математики, бесполезные скобки не исключены.
	Время на ответ ограничено - 10 секунд, иначе дисконнект.
	Все числа, знаки и скобки отделены пробелом для облегчения парсинга.

Решальщик должен написать скрипт, сам и/или используя уже готовые решения для парсинга выражения и вычисления ответа.
При этом будет лучше, если скрипт будет сам подключаться к сокету, отправлять и принимать данные, иначе придется 
копировать 200 раз (туда и обратно 10 уровней по 10 шагов).

Пройдя все уровни, решальщику отправляется симпатичная надпись Congratulations! и не менее симпатичный ascii-art с флагом.

Задача не сложная для владеющих python, php, но времени на подстраивание под сервер потребует, отсюда ценность в 400 
очей считаю оправданной.